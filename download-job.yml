parameters:
  test: ''
  artifactName: ''
  itermPattern: ''

jobs:
- job: test${{ parameters.test }}
  variables:
    TEST_DESCRIPTION: ${{ parameters.description }}
    ARTIFACT: ${{ parameters.artifactName }}
    PATTERN: ${{ parameters.itemPattern }}
  steps:
  - bash: |
      export DPA_ARTIFACT=${ARTIFACT}
      export DPA_PATTERN=${PATTERN}

      export DBA_ARTIFACT=${ARTIFACT/a/b}
      export DBA_PATTERN=${PATTERN/a/b}

      if [ -z "$DBA_ARTIFACT" ]; then
        export DBA_DOWNLOAD_TYPE="specific"
      else
        export DBA_DOWNLOAD_TYPE="single"
      fi

      echo "##vso[task.setVariable variable=DPA_ARTIFACT]$DPA_ARTIFACT"
      echo "##vso[task.setVariable variable=DPA_PATTERN]$DPA_PATTERN"
      echo "##vso[task.setVariable variable=DBA_ARTIFACT]$DBA_ARTIFACT"
      echo "##vso[task.setVariable variable=DBA_PATTERN]$DBA_PATTERN"
      echo "##vso[task.setVariable variable=DBA_DOWNLOAD_TYPE]$DBA_DOWNLOAD_TYPE"

  - bash: npm install -g tree-node-cli

  - task: DownloadBuildArtifacts@0
    inputs:
      downloadPath: '$(Build.SourcesDirectory)/results/dba'
      artifactName: '$(DBA_ARTIFACT)'
      itemPattern: '$(DBA_PATTERN)'
      downloadType: '$(DBA_DOWNLOAD_TYPE)'
    continueOnError: true

  # - task: DownloadPipelineArtifact@1
  #   inputs:
  #     targetPath: '$(Build.SourcesDirectory)/results/dpa'
  #     ArtifactName: '$(DPA_ARTIFACT)'
  #     itemPattern: '$(DPA_PATTERN)'
  #   continueOnError: true

  - bash: |
      cd files
      tree
      echo ""
      cd ../results/dba
      tree
    displayName: 'Results'
    continueOnError: true
  
